{"version":3,"sources":["factories/shipFactory.js","factories/gameBoard.js","factories/playerFactory.js","Components/GameBoardGrid.js","Components/Announcement.js","App.js","index.js"],"names":["shipFactory","boundary","shipDamagePosition","setShipInitialStatus","value","_","times","shipLength","i","push","isSunk","reduce","cumulative","current","hit","x","y","shipCoordinateObj","axis","antiAxis","orientation","gameBoard","config","parseConfig","cfg","shipsInfo","gameBoardSizeX","gameBoardSizeY","createGameBoardGrid","boardGrid","eachRow","shipInfo","isDamaged","forEach","dx","ship","dy","origin","gameBoardGrid","receiveAttack","shipCoordinateX","shipCoordinateY","areAllShipsSunk","cum","curr","playerFactory","makeRandomTurn","inputX","inputY","sizeX","sizeY","Math","floor","random","SpecificGrid","props","Grid","Column","textAlign","className","gridCSS","onClick","GameBoardGrids","onCellClick","map","row","column","accessiblePlayer","Announcement","winner","open","setOpen","initializeStates","Modal","basic","onClose","onOpen","size","Header","icon","Icon","name","Content","Actions","Button","color","inverted","App","playerMove","useState","activePlayer","setActivePlayer","gameStage","setGameStage","userShipInfo","setUserShipInfo","shipPlacingCount","setShipPlacingCount","shipOrientationList","shipOrientation","setShipOrientation","setWinner","winnerModal","setWinnerModal","successfulHit","setSuccessfulHit","contSuccessfulHit","setContSuccessfulHit","calcVariationX","calcVariationY","createShipsInfoData","input","inputInfo","length","humanGameBoard","setHumanGameBoard","AIGameBoard","setAIGameBoard","useEffect","checkClashesUponPlacement","statusCheck","eachShip","clashStatus","iterY","relativeX","relativeY","includes","as","to","width","columns","gameBoardSize","prev","setTimeout","randomCoordinates","contSuccessfulHitValidity","successfulHitValidity","console","log","primary","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7454b6df.chunk.js","sourcesContent":["import _ from \"lodash\";\n\nconst shipFactory = (boundary) => {\n  let shipDamagePosition = [];\n\n  const setShipInitialStatus = (value) => {\n    shipDamagePosition = [];\n    return _.times(boundary.shipLength, (i) => {\n      shipDamagePosition.push(value);\n    });\n  };\n\n  setShipInitialStatus(false);\n\n  const isSunk = () => {\n    return shipDamagePosition.reduce(\n      (cumulative, current) => cumulative && current,\n      true\n    );\n  };\n\n  const hit = (x, y) => {\n    const shipCoordinateObj = { x, y };\n    let axis = \"x\";\n    let antiAxis = \"y\";\n    const isInsideShipBoundary = () => {\n      if (boundary.orientation === \"horizontal\") {\n        axis = \"x\";\n        antiAxis = \"y\";\n      }\n      if (boundary.orientation === \"vertical\") {\n        axis = \"y\";\n        antiAxis = \"x\";\n      }\n      return (\n        shipCoordinateObj[axis] >= 0 &&\n        shipCoordinateObj[axis] < boundary.shipLength &&\n        shipCoordinateObj[antiAxis] === 0\n      );\n    };\n\n    const isAttacked = () => {\n      return shipDamagePosition[shipCoordinateObj[axis]];\n    };\n\n    if (isInsideShipBoundary() && !isAttacked()) {\n      isSunk();\n      shipDamagePosition[shipCoordinateObj[axis]] = true;\n      return true;\n    }\n\n    return false;\n  };\n\n  return { shipDamagePosition, hit, boundary, isSunk, setShipInitialStatus };\n};\n\nexport default shipFactory;\n","import \"../App.css\";\n\nconst gameBoard = (config = {}) => {\n  const parseConfig = (cfg) => {\n    let { shipsInfo, gameBoardSizeX, gameBoardSizeY } = config;\n    return {\n      shipsInfo: shipsInfo || [],\n      gameBoardSizeX: gameBoardSizeX || 10,\n      gameBoardSizeY: gameBoardSizeY || 10,\n    };\n  };\n\n  const { shipsInfo, gameBoardSizeX, gameBoardSizeY } = parseConfig(config);\n\n  const createGameBoardGrid = () => {\n    const boardGrid = [];\n    for (let y = 0; y < gameBoardSizeY; y++) {\n      const eachRow = [];\n      for (let x = 0; x < gameBoardSizeX; x++) {\n        eachRow.push({ shipInfo: null, isDamaged: false });\n      }\n      boardGrid.push(eachRow);\n    }\n\n    shipsInfo.forEach((shipInfo) => {\n      const dx = shipInfo.ship.boundary.orientation === \"horizontal\";\n      const dy = shipInfo.ship.boundary.orientation === \"vertical\";\n      for (let i = 0; i < shipInfo.ship.boundary.shipLength; i++) {\n        const x = shipInfo.origin.x + dx * i;\n        const y = shipInfo.origin.y + dy * i;\n        boardGrid[y][x].shipInfo = shipInfo;\n      }\n    });\n\n    return boardGrid;\n  };\n\n  const gameBoardGrid = createGameBoardGrid();\n\n  const receiveAttack = (x, y) => {\n    if (gameBoardGrid[y][x].isDamaged === true) return false;\n    if (gameBoardGrid[y][x].shipInfo === null) {\n      gameBoardGrid[y][x].isDamaged = true;\n      return \"missed attack\";\n    }\n\n    const shipCoordinateX = x - gameBoardGrid[y][x].shipInfo.origin.x;\n    const shipCoordinateY = y - gameBoardGrid[y][x].shipInfo.origin.y;\n    gameBoardGrid[y][x].isDamaged = true;\n    return gameBoardGrid[y][x].shipInfo.ship.hit(\n      shipCoordinateX,\n      shipCoordinateY\n    );\n  };\n\n  const areAllShipsSunk = () => {\n    return shipsInfo.reduce((cum, curr) => curr.ship.isSunk() && cum, true);\n  };\n\n  return {\n    gameBoardGrid,\n    receiveAttack,\n    areAllShipsSunk,\n  };\n};\n\nexport default gameBoard;\n","const playerFactory = () => {\n  const makeRandomTurn = (inputX, inputY, sizeX = 10, sizeY = 10) => {\n    const x = inputX || Math.floor(Math.random() * sizeX);\n    const y = inputY || Math.floor(Math.random() * sizeY);\n    return { x, y };\n  };\n\n  return { makeRandomTurn };\n};\n\nexport default playerFactory;\n","import { Grid } from \"semantic-ui-react\";\n\nconst SpecificGrid = (props) => {\n  return (\n    <Grid.Column\n      textAlign=\"center\"\n      className={props.gridCSS}\n      onClick={props.onClick}\n    />\n  );\n};\n\nconst GameBoardGrids = (props) => {\n  const onCellClick = props.onCellClick || (() => {});\n  return props.gameBoard.gameBoardGrid.map((row, y) => {\n    return row.map((column, x) => {\n      let gridCSS = \"eachGrid\";\n      if (column.isDamaged && column.shipInfo) gridCSS = \"damagedGrid\";\n      if (column.isDamaged && !column.shipInfo) gridCSS = \"missedShotGrid\";\n      if (\n        !column.isDamaged &&\n        column.shipInfo &&\n        props.accessiblePlayer === \"AI\"\n      )\n        gridCSS = \"ownShips\";\n      return (\n        <SpecificGrid\n          gridCSS={gridCSS}\n          onClick={() => {\n            onCellClick(x, y);\n          }}\n        />\n      );\n    });\n  });\n};\n\nexport { GameBoardGrids, SpecificGrid };\n","import { useState } from \"react\";\nimport { Modal, Header, Button, Icon } from \"semantic-ui-react\";\n\nconst Announcement = ({ winner, open = false, setOpen, initializeStates }) => {\n  return (\n    <>\n      <Modal\n        basic\n        onClose={() => setOpen(false)}\n        onOpen={() => setOpen(true)}\n        open={open}\n        size=\"small\"\n      >\n        <Header icon>\n          <Icon name=\"winner\" />\n          Game Completes!\n        </Header>\n        <Modal.Content textAlign=\"center\">\n          <p>\n            {winner} wins!\n            <br></br>\n            Want to play again?\n          </p>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            color=\"green\"\n            inverted\n            onClick={() => {\n              setOpen(false);\n              initializeStates();\n            }}\n          >\n            <Icon name=\"checkmark\" /> Yes\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    </>\n  );\n};\n\nexport default Announcement;\n","import \"./App.css\";\nimport shipFactory from \"./factories/shipFactory\";\nimport gameBoard from \"./factories/gameBoard\";\nimport playerFactory from \"./factories/playerFactory\";\nimport { Link } from \"react-router-dom\";\nimport { Header, Grid, Button, Icon } from \"semantic-ui-react\";\nimport { useEffect, useState } from \"react\";\nimport { GameBoardGrids } from \"./Components/GameBoardGrid\";\nimport Announcement from \"./Components/Announcement\";\nimport { random } from \"lodash\";\n\nfunction App() {\n  const playerMove = playerFactory();\n  const [activePlayer, setActivePlayer] = useState(\"Human\");\n  const [gameStage, setGameStage] = useState(0);\n\n  const [userShipInfo, setUserShipInfo] = useState([]);\n  const [shipPlacingCount, setShipPlacingCount] = useState(0);\n  const [shipOrientationList, setShipOrientationList] = useState([\n    \"horizontal\",\n    \"vertical\",\n  ]);\n  const [shipOrientation, setShipOrientation] = useState(0);\n  const [winner, setWinner] = useState(\"\");\n  const [winnerModal, setWinnerModal] = useState(false);\n  const [successfulHit, setSuccessfulHit] = useState({\n    value: false,\n    x: null,\n    y: null,\n  });\n  const [contSuccessfulHit, setContSuccessfulHit] = useState({\n    value: false,\n    x: null,\n    y: null,\n  });\n  const [calcVariationX, setCalcVariationX] = useState([1, -1, 0, 0]);\n  const [calcVariationY, setCalcVariationY] = useState([0, 0, -1, 1]);\n\n  const createShipsInfoData = (input) => {\n    const inputInfo = input || [\n      { x: 7, y: 2, orientation: \"vertical\", shipLength: 2 },\n      { x: 4, y: 5, orientation: \"horizontal\", shipLength: 3 },\n      { x: 5, y: 9, orientation: \"horizontal\", shipLength: 4 },\n      { x: 1, y: 2, orientation: \"vertical\", shipLength: 5 },\n    ];\n\n    if (inputInfo.length === 0) {\n      return [];\n    }\n\n    let shipsInfo = [];\n    for (let i = 0; i < inputInfo.length; i++) {\n      shipsInfo = [\n        ...shipsInfo,\n        {\n          ship: shipFactory({\n            orientation: inputInfo[i].orientation,\n            shipLength: inputInfo[i].shipLength,\n          }),\n          origin: { x: inputInfo[i].x, y: inputInfo[i].y },\n        },\n      ];\n    }\n    return shipsInfo;\n  };\n\n  const [humanGameBoard, setHumanGameBoard] = useState(\n    gameBoard({\n      shipsInfo: createShipsInfoData(userShipInfo),\n    })\n  );\n\n  const [AIGameBoard, setAIGameBoard] = useState(\n    gameBoard({\n      shipsInfo: createShipsInfoData(),\n    })\n  );\n\n  const initializeStates = () => {\n    setActivePlayer(\"Human\");\n    setGameStage(0);\n    setUserShipInfo([]);\n    setShipPlacingCount(0);\n    setShipOrientation(0);\n    setWinner(\"\");\n    setWinnerModal(false);\n    setHumanGameBoard(\n      gameBoard({\n        shipsInfo: createShipsInfoData(userShipInfo),\n      })\n    );\n    setAIGameBoard(\n      gameBoard({\n        shipsInfo: createShipsInfoData(),\n      })\n    );\n  };\n\n  useEffect(() => {\n    setHumanGameBoard(\n      gameBoard({\n        shipsInfo: createShipsInfoData(userShipInfo),\n      })\n    );\n  }, [userShipInfo]);\n\n  const orderMove = (x, y) => {\n    if (\n      !AIGameBoard.gameBoardGrid[y][x].isDamaged &&\n      activePlayer === \"Human\" &&\n      !AIGameBoard.areAllShipsSunk() &&\n      !humanGameBoard.areAllShipsSunk()\n    ) {\n      AIGameBoard.receiveAttack(x, y);\n      setActivePlayer(\"AI\");\n      setTimeout(() => {\n        let randomCoordinates = {};\n        let contSuccessfulHitValidity = 1;\n        let successfulHitValidity = 3;\n        do {\n          if (contSuccessfulHit.value && contSuccessfulHitValidity >= 0) {\n            contSuccessfulHit.x - successfulHit.x === 0\n              ? (randomCoordinates.x = contSuccessfulHit.x)\n              : (randomCoordinates.x =\n                  contSuccessfulHit.x +\n                  calcVariationX[contSuccessfulHitValidity]);\n            contSuccessfulHit.y - successfulHit.y === 0\n              ? (randomCoordinates.y = contSuccessfulHit.y)\n              : (randomCoordinates.y =\n                  contSuccessfulHit.y +\n                  calcVariationX[contSuccessfulHitValidity]);\n\n            contSuccessfulHitValidity = contSuccessfulHitValidity - 1;\n          } else if (successfulHit.value && successfulHitValidity >= 0) {\n            randomCoordinates.x =\n              successfulHit.x + calcVariationX[successfulHitValidity];\n            randomCoordinates.y =\n              successfulHit.y + calcVariationY[successfulHitValidity];\n            successfulHitValidity = successfulHitValidity - 1;\n          } else randomCoordinates = playerMove.makeRandomTurn();\n\n          if (contSuccessfulHitValidity < 0) {\n            setContSuccessfulHit({\n              value: false,\n              x: null,\n              y: null,\n            });\n          }\n\n          if (successfulHitValidity < 0) {\n            randomCoordinates = playerMove.makeRandomTurn();\n            setSuccessfulHit({\n              value: false,\n              x: null,\n              y: null,\n            });\n          }\n        } while (\n          !humanGameBoard.receiveAttack(\n            randomCoordinates.x,\n            randomCoordinates.y\n          )\n        );\n        if (\n          humanGameBoard.gameBoardGrid[randomCoordinates.y][randomCoordinates.x]\n            .shipInfo\n        ) {\n          if (contSuccessfulHit.value) {\n            setSuccessfulHit({\n              value: true,\n              x: contSuccessfulHit.x,\n              y: contSuccessfulHit.y,\n            });\n            setContSuccessfulHit({\n              ...contSuccessfulHit,\n              value: true,\n              x: randomCoordinates.x,\n              y: randomCoordinates.y,\n            });\n          }\n\n          successfulHit.value\n            ? setContSuccessfulHit({\n                ...contSuccessfulHit,\n                value: true,\n                x: randomCoordinates.x,\n                y: randomCoordinates.y,\n              })\n            : setSuccessfulHit({\n                ...successfulHit,\n                value: true,\n                x: randomCoordinates.x,\n                y: randomCoordinates.y,\n              });\n        }\n        console.log(successfulHit);\n        console.log(contSuccessfulHit);\n        setActivePlayer(\"Human\");\n      }, 1000);\n    }\n\n    if (humanGameBoard.areAllShipsSunk()) {\n      setWinner(\"AI\");\n      setWinnerModal(true);\n    }\n    if (AIGameBoard.areAllShipsSunk()) {\n      setWinner(\"Human\");\n      setWinnerModal(true);\n    }\n  };\n\n  const checkClashesUponPlacement = (x, y) => {\n    const statusCheck = userShipInfo.map((eachShip) => {\n      let clashStatus = [];\n      for (let i = 0; i < shipPlacingCount + 2; i++) {\n        const dx = shipOrientation === 0;\n        const dy = shipOrientation === 1;\n        const iterX = x + dx * i;\n        const iterY = y + dy * i;\n        const relativeX = iterX - eachShip.x;\n        const relativeY = iterY - eachShip.y;\n        const shipCoordinateObj = { relativeX, relativeY };\n        let axis = \"relativeX\";\n        let antiAxis = \"relativeY\";\n\n        if (eachShip.orientation === \"horizontal\") {\n          axis = \"relativeX\";\n          antiAxis = \"relativeY\";\n        }\n        if (eachShip.orientation === \"vertical\") {\n          axis = \"relativeY\";\n          antiAxis = \"relativeX\";\n        }\n\n        clashStatus.push(\n          shipCoordinateObj[axis] >= 0 &&\n            shipCoordinateObj[axis] < eachShip.shipLength &&\n            shipCoordinateObj[antiAxis] === 0\n        );\n      }\n\n      return clashStatus.includes(true);\n    });\n\n    if (statusCheck.length === 0) return false;\n\n    return statusCheck.includes(true);\n  };\n\n  const placeUserShips = (x, y, gameBoardSize = 10) => {\n    if (gameStage === 1) {\n      const dx = shipOrientation === 0;\n      const dy = shipOrientation === 1;\n\n      if (\n        x + dx * (shipPlacingCount + 2) > gameBoardSize ||\n        y + dy * (shipPlacingCount + 2) > gameBoardSize\n      )\n        return null;\n\n      if (checkClashesUponPlacement(x, y)) return null;\n\n      setUserShipInfo([\n        ...userShipInfo,\n        {\n          x,\n          y,\n          orientation: shipOrientationList[shipOrientation],\n          shipLength: shipPlacingCount + 2,\n        },\n      ]);\n\n      setShipPlacingCount((prev) => prev + 1);\n    }\n    if (shipPlacingCount >= 3) setGameStage(2);\n  };\n\n  return (\n    <>\n      <Announcement\n        winner={winner}\n        open={winnerModal}\n        setOpen={setWinnerModal}\n        initializeStates={initializeStates}\n      />\n      <Header icon as=\"h1\" textAlign=\"center\">\n        <Icon name=\"ship\" size=\"small\" />\n        Battleship Game\n      </Header>\n      {gameStage > 0 ? (\n        <></>\n      ) : (\n        <Header as=\"h2\" textAlign=\"center\">\n          <Link\n            to=\"/\"\n            onClick={() => {\n              setGameStage(1);\n            }}\n          >\n            Start Game\n          </Link>\n        </Header>\n      )}\n\n      {gameStage > 0 ? (\n        <Grid>\n          <Grid.Column width={1}></Grid.Column>\n          <Grid.Column width={6}>\n            <Header as=\"h2\" textAlign=\"center\">\n              User Board\n            </Header>\n            <Grid columns={10}>\n              <GameBoardGrids\n                gameBoard={humanGameBoard}\n                accessiblePlayer=\"AI\"\n                onCellClick={placeUserShips}\n              />\n              ;\n            </Grid>\n          </Grid.Column>\n          <Grid.Column width={2}></Grid.Column>\n          <Grid.Column width={6}>\n            {gameStage > 1 ? (\n              <>\n                <Header as=\"h2\" textAlign=\"center\">\n                  AI Board\n                </Header>\n                <Grid columns={10}>\n                  <GameBoardGrids\n                    gameBoard={AIGameBoard}\n                    accessiblePlayer=\"Human\"\n                    onCellClick={orderMove}\n                  />\n                </Grid>\n              </>\n            ) : (\n              <>\n                <Header as=\"h2\" textAlign=\"center\">\n                  Place your ship {shipPlacingCount + 1} out of 4 ships\n                </Header>\n                <Header as=\"h3\" textAlign=\"center\">\n                  Ship Length: {shipPlacingCount + 2}\n                  <br></br>\n                  Ship Orientation: {shipOrientationList[shipOrientation]}\n                  <br></br>\n                  <Button\n                    primary\n                    textAlign=\"center\"\n                    onClick={() => setShipOrientation(1 - shipOrientation)}\n                  >\n                    Switch Ship Orientation\n                  </Button>\n                </Header>\n              </>\n            )}\n          </Grid.Column>\n        </Grid>\n      ) : (\n        <></>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { HashRouter, Switch } from \"react-router-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Switch>\n        <App />\n      </Switch>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}